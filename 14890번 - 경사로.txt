#include <iostream>

using namespace std;

int map[100][100];
int clonline[100];
int n, l, cnt = 0;

bool rgsr[100];
bool lgsr[100];

bool isSameHeight(int s, int e) {
	for (int i = s; i < e; i++) {
		if (clonline[i] != clonline[i + 1]) {
			return false;
		}
	}
	return true;
}

void inspection(int ay, int ax, int by, int bx) {
	// 클론 배열 복사
	if (ay == by) {
		// y좌표 같음 가로로 봄.
		for (int i = 0; i < n; i++) {
			clonline[i] = map[ay][i];
		}
	}
	else if (ax == bx) {
		// x좌표 같음 세로로 봄.
		for (int i = 0; i < n; i++) {
			clonline[i] = map[i][ax];
		}
	}

	// 1. 높이 다 같은 경우
	if (isSameHeight(0, n - 1)) {
		cnt++;
		return;
	}

	// 경사로 배열 초기화
	for (int i = 0; i < n; i++) {
		rgsr[i] = false;
		lgsr[i] = false;
	}

	int differ;

	//앞에서 뒤로 탐색
	for (int i = 0; i < n-1; i++) {
		differ = clonline[i] - clonline[i + 1];
		if (differ > 1) {
			return;
		}
		else if (differ == 1) {
			int e = i + l;
			if (e >= n)
				return;

			if (isSameHeight(i + 1, e)) {
				// 경사로 설치
				for (int j = i + 1; j <= e; j++) {
					rgsr[j] = true;
				}
			}
			else {
				return;
			}
		}
	}

	//뒤에서 앞으로 탐색
	for (int i = n - 1; i > 0; i--) {
		differ = clonline[i] - clonline[i - 1];
		if (differ > 1)
			return;
		else if (differ == 1) {
			int s = i - l;
			if (s < 0)
				return;

			if (isSameHeight(s, i - 1)) {
				//경사로 설치
				for (int j = s; j <= i - 1; j++) {
					lgsr[j] = true;
				}
			}
			else {
				return;
			}
		}
	}

	for (int i = 0; i < n; i++) {
		if (rgsr[i] && lgsr[i]) {
			return;
		}
	}

	cnt++;

}

int main()
{
	cin >> n >> l;

	for (int i = 0; i < n; i++)
		for (int j = 0; j < n; j++)
			cin >> map[i][j];


	for (int i = 0; i < n; i++) {
		inspection(i, 0, i, n - 1);
	}

	for (int j = 0; j < n; j++) {
		inspection(0, j, n - 1, j);
	}

	cout << cnt;
}